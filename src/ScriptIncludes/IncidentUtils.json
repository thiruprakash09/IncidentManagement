{
    "sys_id": "g7h8i9j0k1l2m3n4o5p6",
    "name": "IncidentUtils",
    "client_callable": true,
    "description": "Utility functions for incident management",
    "script": "/**\n * Script Include: IncidentUtils\n * \n * Provides utility functions for incident management\n */\nvar IncidentUtils = Class.create();\nIncidentUtils.prototype = Object.extendsObject(AbstractAjaxProcessor, {\n    \n    /**\n     * Get the number of open incidents for a caller\n     * \n     * @param {string} callerId - The sys_id of the caller\n     * @return {number} Count of open incidents\n     */\n    getOpenIncidentsForCaller: function(callerId) {\n        if (!callerId) {\n            callerId = this.getParameter('sysparm_caller_id');\n        }\n        \n        if (!callerId) {\n            return 0;\n        }\n        \n        var count = 0;\n        var gr = new GlideRecord('incident');\n        gr.addQuery('caller_id', callerId);\n        gr.addQuery('active', true);\n        gr.query();\n        count = gr.getRowCount();\n        \n        return count;\n    },\n    \n    /**\n     * Get the incident age in days\n     * \n     * @param {string} incidentSysId - The sys_id of the incident\n     * @return {number} Age in days (decimal)\n     */\n    getIncidentAge: function(incidentSysId) {\n        if (!incidentSysId) {\n            incidentSysId = this.getParameter('sysparm_incident_sys_id');\n        }\n        \n        if (!incidentSysId) {\n            return 0;\n        }\n        \n        var gr = new GlideRecord('incident');\n        if (!gr.get(incidentSysId)) {\n            return 0;\n        }\n        \n        var created = new GlideDateTime(gr.sys_created_on);\n        var now = new GlideDateTime();\n        var diff = GlideDateTime.subtract(now, created);\n        \n        // Convert duration to days (ms to days)\n        var days = diff.getNumericValue() / (1000 * 60 * 60 * 24);\n        return Math.round(days * 100) / 100; // Round to 2 decimal places\n    },\n    \n    /**\n     * Check if an incident has breached its SLA\n     * \n     * @param {string} incidentSysId - The sys_id of the incident\n     * @return {boolean} True if any SLA is breached\n     */\n    hasSLABreach: function(incidentSysId) {\n        if (!incidentSysId) {\n            incidentSysId = this.getParameter('sysparm_incident_sys_id');\n        }\n        \n        if (!incidentSysId) {\n            return false;\n        }\n        \n        var hasBreach = false;\n        \n        // Check the task SLA table for breached records\n        var slaTasks = new GlideRecord('task_sla');\n        slaTasks.addQuery('task', incidentSysId);\n        slaTasks.addQuery('stage', 'breached');\n        slaTasks.query();\n        \n        if (slaTasks.hasNext()) {\n            hasBreach = true;\n        }\n        \n        return hasBreach;\n    },\n    \n    /**\n     * Get summary statistics for all incidents\n     * \n     * @return {object} Statistics about the incidents\n     */\n    getIncidentStatistics: function() {\n        var stats = {\n            total: 0,\n            open: 0,\n            closed: 0,\n            new: 0,\n            inProgress: 0,\n            resolved: 0,\n            priority1: 0,\n            priority2: 0,\n            avgResolutionTime: 0\n        };\n        \n        // Get the total count\n        var totalGr = new GlideAggregate('incident');\n        totalGr.addAggregate('COUNT');\n        totalGr.query();\n        if (totalGr.next()) {\n            stats.total = totalGr.getAggregate('COUNT');\n        }\n        \n        // Get open count\n        var openGr = new GlideAggregate('incident');\n        openGr.addQuery('active', true);\n        openGr.addAggregate('COUNT');\n        openGr.query();\n        if (openGr.next()) {\n            stats.open = openGr.getAggregate('COUNT');\n        }\n        \n        // Get closed count\n        stats.closed = stats.total - stats.open;\n        \n        // Get counts by state\n        var stateGr = new GlideAggregate('incident');\n        stateGr.addQuery('active', true);\n        stateGr.addAggregate('COUNT', 'state');\n        stateGr.groupBy('state');\n        stateGr.query();\n        \n        while (stateGr.next()) {\n            var stateCount = parseInt(stateGr.getAggregate('COUNT', 'state'));\n            var state = stateGr.state.toString();\n            \n            if (state == '1') { // New\n                stats.new = stateCount;\n            } else if (state == '2') { // In Progress\n                stats.inProgress = stateCount;\n            } else if (state == '6') { // Resolved\n                stats.resolved = stateCount;\n            }\n        }\n        \n        // Get counts by priority\n        var priorityGr = new GlideAggregate('incident');\n        priorityGr.addQuery('active', true);\n        priorityGr.addAggregate('COUNT', 'priority');\n        priorityGr.groupBy('priority');\n        priorityGr.query();\n        \n        while (priorityGr.next()) {\n            var priorityCount = parseInt(priorityGr.getAggregate('COUNT', 'priority'));\n            var priority = priorityGr.priority.toString();\n            \n            if (priority == '1') { // Critical\n                stats.priority1 = priorityCount;\n            } else if (priority == '2') { // High\n                stats.priority2 = priorityCount;\n            }\n        }\n        \n        // Calculate average resolution time (for closed incidents)\n        var avgGr = new GlideAggregate('incident');\n        avgGr.addQuery('closed_at', '!=', '');\n        avgGr.addAggregate('AVG', 'calendar_duration');\n        avgGr.query();\n        \n        if (avgGr.next()) {\n            var avgDuration = avgGr.getAggregate('AVG', 'calendar_duration');\n            if (avgDuration) {\n                // Convert duration to hours\n                stats.avgResolutionTime = Math.round(avgDuration / 3600);\n            }\n        }\n        \n        return stats;\n    },\n    \n    type: 'IncidentUtils'\n});"
}
