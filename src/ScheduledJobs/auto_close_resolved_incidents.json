{
    "sys_id": "l2m3n4o5p6q7r8s9t0u1",
    "name": "Auto Close Resolved Incidents",
    "script": "/**\n * Scheduled Job: Auto Close Resolved Incidents\n * \n * Automatically closes incidents that have been in Resolved state for more than 7 days\n */\nvar resolver = new AutoCloseResolvedIncidents();\nresolver.process();\n\n/**\n * Class to handle the auto-closure of resolved incidents\n */\nfunction AutoCloseResolvedIncidents() {\n    \n    /**\n     * Process all eligible incidents\n     */\n    this.process = function() {\n        var closedCount = 0;\n        var incGr = new GlideRecord('incident');\n        \n        // Find all resolved incidents not updated in 7 days\n        incGr.addQuery('state', '6'); // 6 = Resolved\n        incGr.addQuery('sys_updated_on', '<', gs.daysAgoStart(7));\n        incGr.query();\n        \n        gs.info('Auto-close job found ' + incGr.getRowCount() + ' incidents eligible for closure');\n        \n        while (incGr.next()) {\n            // Log the incident we're about to close\n            gs.info('Auto-closing incident: ' + incGr.number + ' - ' + incGr.short_description);\n            \n            // Update the incident to closed state\n            incGr.state = 7; // 7 = Closed\n            incGr.close_notes = 'Automatically closed after 7 days in Resolved state';\n            incGr.closed_by = this._getSystemUserID();\n            incGr.closed_at = new GlideDateTime();\n            \n            // Update the record\n            if (incGr.update()) {\n                closedCount++;\n            } else {\n                gs.error('Failed to close incident: ' + incGr.number);\n            }\n        }\n        \n        gs.info('Auto-close job successfully closed ' + closedCount + ' incidents');\n        return 'Closed ' + closedCount + ' incidents';\n    };\n    \n    /**\n     * Get the system user ID for automated operations\n     */\n    this._getSystemUserID = function() {\n        var sysUser = new GlideRecord('sys_user');\n        sysUser.addQuery('user_name', 'system');\n        sysUser.query();\n        \n        if (sysUser.next()) {\n            return sysUser.sys_id;\n        }\n        \n        return gs.getUserID(); // Fallback to current user\n    };\n}",
    "run_date": "",
    "run_time": "",
    "schedule": "0 0 * * *",
    "schedule_description": "Daily at midnight",
    "condition": ""
}
