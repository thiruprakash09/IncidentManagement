{
    "api_name": "incident_management",
    "api_version": "1.0.0",
    "api_base_path": "/api/x_myapp/incident_management",
    "resources": [
        {
            "resource_path": "/incidents",
            "http_method": "GET",
            "short_description": "Get all incidents",
            "script": "/**\n * Scripted REST Resource: Get Incidents\n * \n * Returns a list of incidents with optional filtering\n */\n(function process(request, response) {\n    try {\n        // Get query parameters\n        var state = request.queryParams.state;\n        var priority = request.queryParams.priority;\n        var limit = request.queryParams.limit || 100;\n        var offset = request.queryParams.offset || 0;\n        \n        // Convert limit/offset to numbers\n        limit = parseInt(limit);\n        offset = parseInt(offset);\n        \n        // Create a response object\n        var result = {\n            success: true,\n            count: 0,\n            incidents: []\n        };\n        \n        // Build the query\n        var incGr = new GlideRecord('incident');\n        \n        // Add filters if provided\n        if (state) {\n            incGr.addQuery('state', state);\n        }\n        if (priority) {\n            incGr.addQuery('priority', priority);\n        }\n        \n        // Apply pagination\n        incGr.chooseWindow(offset, limit);\n        \n        // Order by newest first\n        incGr.orderByDesc('sys_created_on');\n        \n        // Execute the query\n        incGr.query();\n        \n        // Get the total count\n        var countGr = new GlideAggregate('incident');\n        if (state) {\n            countGr.addQuery('state', state);\n        }\n        if (priority) {\n            countGr.addQuery('priority', priority);\n        }\n        countGr.addAggregate('COUNT');\n        countGr.query();\n        \n        if (countGr.next()) {\n            result.count = parseInt(countGr.getAggregate('COUNT'));\n        }\n        \n        // Process results\n        while (incGr.next()) {\n            var incident = {\n                sys_id: incGr.sys_id.toString(),\n                number: incGr.number.toString(),\n                short_description: incGr.short_description.toString(),\n                priority: incGr.priority.getDisplayValue(),\n                state: incGr.state.getDisplayValue(),\n                assigned_to: incGr.assigned_to.getDisplayValue(),\n                assignment_group: incGr.assignment_group.getDisplayValue(),\n                created_on: incGr.sys_created_on.getDisplayValue(),\n                updated_on: incGr.sys_updated_on.getDisplayValue()\n            };\n            \n            result.incidents.push(incident);\n        }\n        \n        // Add pagination info\n        result.pagination = {\n            offset: offset,\n            limit: limit,\n            total: result.count\n        };\n        \n        // Set response\n        response.setStatus(200);\n        response.setContentType('application/json');\n        response.setBody(result);\n        \n    } catch (ex) {\n        var errorResponse = {\n            success: false,\n            message: ex.message\n        };\n        \n        response.setStatus(500);\n        response.setContentType('application/json');\n        response.setBody(errorResponse);\n    }\n})(request, response);"
        },
        {
            "resource_path": "/incidents/{sys_id}",
            "http_method": "GET",
            "short_description": "Get a specific incident by sys_id",
            "script": "/**\n * Scripted REST Resource: Get Incident by ID\n * \n * Returns details for a specific incident\n */\n(function process(request, response) {\n    try {\n        // Get the sys_id from the path parameter\n        var sysId = request.pathParams.sys_id;\n        \n        if (!sysId) {\n            var errorResponse = {\n                success: false,\n                message: 'No sys_id provided'\n            };\n            \n            response.setStatus(400);\n            response.setContentType('application/json');\n            response.setBody(errorResponse);\n            return;\n        }\n        \n        // Look up the incident\n        var incGr = new GlideRecord('incident');\n        if (!incGr.get(sysId)) {\n            var notFoundResponse = {\n                success: false,\n                message: 'Incident not found'\n            };\n            \n            response.setStatus(404);\n            response.setContentType('application/json');\n            response.setBody(notFoundResponse);\n            return;\n        }\n        \n        // Build a detailed response\n        var result = {\n            success: true,\n            incident: {\n                sys_id: incGr.sys_id.toString(),\n                number: incGr.number.toString(),\n                short_description: incGr.short_description.toString(),\n                description: incGr.description.toString(),\n                priority: {\n                    value: incGr.priority.toString(),\n                    display: incGr.priority.getDisplayValue()\n                },\n                state: {\n                    value: incGr.state.toString(),\n                    display: incGr.state.getDisplayValue()\n                },\n                impact: {\n                    value: incGr.impact.toString(),\n                    display: incGr.impact.getDisplayValue()\n                },\n                urgency: {\n                    value: incGr.urgency.toString(),\n                    display: incGr.urgency.getDisplayValue()\n                },\n                assigned_to: {\n                    sys_id: incGr.assigned_to.toString(),\n                    display: incGr.assigned_to.getDisplayValue()\n                },\n                assignment_group: {\n                    sys_id: incGr.assignment_group.toString(),\n                    display: incGr.assignment_group.getDisplayValue()\n                },\n                caller_id: {\n                    sys_id: incGr.caller_id.toString(),\n                    display: incGr.caller_id.getDisplayValue()\n                },\n                category: incGr.category.toString(),\n                subcategory: incGr.subcategory.toString(),\n                cmdb_ci: {\n                    sys_id: incGr.cmdb_ci.toString(),\n                    display: incGr.cmdb_ci.getDisplayValue()\n                },\n                created: {\n                    on: incGr.sys_created_on.getDisplayValue(),\n                    by: incGr.sys_created_by.toString()\n                },\n                updated: {\n                    on: incGr.sys_updated_on.getDisplayValue(),\n                    by: incGr.sys_updated_by.toString()\n                }\n            }\n        };\n        \n        // Include comments if available\n        var comments = [];\n        var commentGr = new GlideRecord('sys_journal_field');\n        commentGr.addQuery('element', 'comments');\n        commentGr.addQuery('element_id', sysId);\n        commentGr.orderByDesc('sys_created_on');\n        commentGr.query();\n        \n        while (commentGr.next()) {\n            comments.push({\n                value: commentGr.value.toString(),\n                created_on: commentGr.sys_created_on.getDisplayValue(),\n                created_by: commentGr.sys_created_by.toString()\n            });\n        }\n        \n        result.incident.comments = comments;\n        \n        // Set response\n        response.setStatus(200);\n        response.setContentType('application/json');\n        response.setBody(result);\n        \n    } catch (ex) {\n        var errorResponse = {\n            success: false,\n            message: ex.message\n        };\n        \n        response.setStatus(500);\n        response.setContentType('application/json');\n        response.setBody(errorResponse);\n    }\n})(request, response);"
        },
        {
            "resource_path": "/incidents",
            "http_method": "POST",
            "short_description": "Create a new incident",
            "script": "/**\n * Scripted REST Resource: Create Incident\n * \n * Creates a new incident from the provided data\n */\n(function process(request, response) {\n    try {\n        // Get the JSON body\n        var requestBody = request.body ? request.body.data : null;\n        \n        if (!requestBody) {\n            var missingBodyResponse = {\n                success: false,\n                message: 'No request body provided'\n            };\n            \n            response.setStatus(400);\n            response.setContentType('application/json');\n            response.setBody(missingBodyResponse);\n            return;\n        }\n        \n        // Validate required fields\n        if (!requestBody.short_description) {\n            var missingFieldsResponse = {\n                success: false,\n                message: 'Missing required field: short_description'\n            };\n            \n            response.setStatus(400);\n            response.setContentType('application/json');\n            response.setBody(missingFieldsResponse);\n            return;\n        }\n        \n        // Create a new incident record\n        var incGr = new GlideRecord('incident');\n        incGr.initialize();\n        \n        // Set fields from request body\n        incGr.short_description = requestBody.short_description;\n        \n        if (requestBody.description) {\n            incGr.description = requestBody.description;\n        }\n        if (requestBody.caller_id) {\n            incGr.caller_id = requestBody.caller_id;\n        }\n        if (requestBody.category) {\n            incGr.category = requestBody.category;\n        }\n        if (requestBody.subcategory) {\n            incGr.subcategory = requestBody.subcategory;\n        }\n        if (requestBody.priority) {\n            incGr.priority = requestBody.priority;\n        }\n        if (requestBody.impact) {\n            incGr.impact = requestBody.impact;\n        }\n        if (requestBody.urgency) {\n            incGr.urgency = requestBody.urgency;\n        }\n        if (requestBody.assignment_group) {\n            incGr.assignment_group = requestBody.assignment_group;\n        }\n        if (requestBody.assigned_to) {\n            incGr.assigned_to = requestBody.assigned_to;\n        }\n        if (requestBody.cmdb_ci) {\n            incGr.cmdb_ci = requestBody.cmdb_ci;\n        }\n        \n        // Insert the record\n        var sysId = incGr.insert();\n        \n        if (sysId) {\n            // Successfully created, now load the record to get the incident number\n            var result = {\n                success: true,\n                message: 'Incident created successfully',\n                incident: {\n                    sys_id: sysId,\n                    number: incGr.number.toString()\n                }\n            };\n            \n            response.setStatus(201);\n            response.setContentType('application/json');\n            response.setBody(result);\n            \n        } else {\n            var createFailResponse = {\n                success: false,\n                message: 'Failed to create incident',\n                errors: gs.getErrorMessages()\n            };\n            \n            response.setStatus(500);\n            response.setContentType('application/json');\n            response.setBody(createFailResponse);\n        }\n        \n    } catch (ex) {\n        var errorResponse = {\n            success: false,\n            message: ex.message\n        };\n        \n        response.setStatus(500);\n        response.setContentType('application/json');\n        response.setBody(errorResponse);\n    }\n})(request, response);"
        }
    ]
}
